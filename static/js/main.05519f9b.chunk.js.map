{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","email","password","passwordConfirmation","okayToEmail","_useState2","Object","slicedToArray","enteredData","setEnteredData","handleChange","event","_event$target","target","name","value","type","checked","prevEnteredData","objectSpread","defineProperty","react_default","a","createElement","className","onSubmit","preventDefault","console","log","placeholder","onChange","id","htmlFor","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"iNAiFeA,MA7Ef,WAAe,IAAAC,EAGXC,mBAAS,CACPC,MAAO,GACPC,SAAU,GACVC,qBAAsB,GACtBC,aAAa,IACbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAP,EAAA,GANGS,EAAWH,EAAA,GAAEI,EAAcJ,EAAA,GAWlC,SAASK,EAAaC,GAAO,IAAAC,EACYD,EAAME,OAArCC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MAAOC,EAAIJ,EAAJI,KAAMC,EAAOL,EAAPK,QAC3BR,EAAe,SAAAS,GAAe,OAAAZ,OAAAa,EAAA,EAAAb,CAAA,GACzBY,EAAgBZ,OAAAc,EAAA,EAAAd,CAAA,GAClBQ,EAAgB,aAATE,EAAsBC,EAAUF,MAY5C,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOC,SAVN,SAACd,GACpBA,EAAMe,iBACNlB,EAAYN,WAAaM,EAAYL,qBACjCwB,QAAQC,IAAI,2BACdpB,EAAYJ,aAAeuB,QAAQC,IAAI,6CACrCD,QAAQC,IAAI,4BAMZP,EAAAC,EAAAC,cAAA,SACEP,KAAK,QACLa,YAAY,gBACZL,UAAU,cACVM,SAAUpB,EACVI,KAAK,QACLC,MAAOP,EAAYP,QAErBoB,EAAAC,EAAAC,cAAA,SACEP,KAAK,WACLa,YAAY,WACZL,UAAU,cACVM,SAAUpB,EACVI,KAAK,WACLC,MAAOP,EAAYN,WAErBmB,EAAAC,EAAAC,cAAA,SACEP,KAAK,WACLa,YAAY,mBACZL,UAAU,cACVM,SAAUpB,EACVI,KAAK,uBACLC,MAAOP,EAAYL,uBAGrBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,SACEQ,GAAG,cACHf,KAAK,WACLc,SAAUpB,EACVI,KAAK,cACLG,QAAST,EAAYJ,cAEvBiB,EAAAC,EAAAC,cAAA,SAAOS,QAAQ,eAAa,kCAE9BX,EAAAC,EAAAC,cAAA,UACEC,UAAU,gBAAc,cC5DnBS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH7B,EAAAC,EAAAC,cAACF,EAAAC,EAAM6B,WAAU,KACf9B,EAAAC,EAAAC,cAAC6B,EAAG,QAORnB","file":"static/js/main.05519f9b.chunk.js","sourcesContent":["\nimport './App.css';\nimport React, { useState } from 'react'\n\nfunction App() {\n\n  const [enteredData, setEnteredData] =\n    useState({\n      email: \"\",\n      password: \"\",\n      passwordConfirmation: \"\",\n      okayToEmail: false\n    })\n\n\n\n\n  function handleChange(event) {\n    const { name, value, type, checked } = event.target\n    setEnteredData(prevEnteredData => ({\n      ...prevEnteredData,\n      [name]: type === \"checkbox\" ? checked : value\n    }))\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    enteredData.password === enteredData.passwordConfirmation\n      ? console.log(\"Successfully signed up\") &&\n      enteredData.okayToEmail && console.log(\"Thanks for signing up for our newsletter!\")\n      : console.log(\"Passwords to not match\")\n  }\n\n  return (\n    <div className=\"form-container\">\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <input\n          type=\"email\"\n          placeholder=\"Email address\"\n          className=\"form--input\"\n          onChange={handleChange}\n          name=\"email\"\n          value={enteredData.email}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"form--input\"\n          onChange={handleChange}\n          name=\"password\"\n          value={enteredData.password}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Confirm password\"\n          className=\"form--input\"\n          onChange={handleChange}\n          name=\"passwordConfirmation\"\n          value={enteredData.passwordConfirmation}\n        />\n\n        <div className=\"form--marketing\">\n          <input\n            id=\"okayToEmail\"\n            type=\"checkbox\"\n            onChange={handleChange}\n            name=\"okayToEmail\"\n            checked={enteredData.okayToEmail}\n          />\n          <label htmlFor=\"okayToEmail\">I want to join the newsletter</label>\n        </div>\n        <button\n          className=\"form--submit\"\n        >\n          Sign up\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}